using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Microsoft.Azure.Documents;
using Microsoft.Azure.Documents.Linq;
using System.Collections.Generic;
using System.Net.Http;
using System.Linq;

namespace EmployeeFunction
{
    public static class employee
    {

        [FunctionName("Employee")]
        public static async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
            ILogger log)
        {
            log.LogInformation("C# HTTP trigger function processed a request.");

            string name = req.Query["name"];

            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
            dynamic data = JsonConvert.DeserializeObject(requestBody);
            name = name ?? data?.name;

            return name != null
                ? (ActionResult)new OkObjectResult($"Hello, {name}")
                : new BadRequestObjectResult("Please pass a name on the query string or in the request body");
        }
        [FunctionName("GetEmployees")]
        public static IActionResult GetEmployees([HttpTrigger(AuthorizationLevel.Anonymous, "Get", Route = "GetEmployees")]HttpRequest req, ILogger log,
            [CosmosDB(databaseName: "Employee", collectionName: "Employee", ConnectionStringSetting = "CosmosDBConnection", SqlQuery = "Select * from Employee")]IEnumerable<EmployeeEntity> EmpEntity)
        {
            try
            {

                if (EmpEntity.Count() >= 1)
                {
                    log.LogInformation("Getting Employees");
                    return new OkObjectResult(EmpEntity);
                }
                //var resp = new HttpResponseMessage { Content = new StringContent("Data Not Found", System.Text.Encoding.UTF8, "application/json") };
                //return new NotFoundObjectResult(resp);
                string str = "{ 'EmployeeEntity': { 'Success': 'True','Data': 'null','Message':'No Data Found'} }";
                dynamic json = JsonConvert.DeserializeObject(str);
                return new OkObjectResult(json);
            }
            catch
            {
                string str = "{ 'EmployeeEntity': { 'Success': 'False','Data': 'null','Message':'No Data Found'} }";
                dynamic json = JsonConvert.DeserializeObject(str);
                return new OkObjectResult(json);
            }
        }
        [FunctionName("CreateEmployee")]
        public static async Task<IActionResult> CreateEmployee(
        [HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = "CreateEmployee")]HttpRequest req,
        [CosmosDB(
        databaseName: "Employee",
        collectionName: "Employee",
        ConnectionStringSetting = "CosmosDBConnection")]
        IAsyncCollector<object> todos, ILogger log)
        {
            try
            {
                log.LogInformation("Creating a new Employee list item");
                string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
                var input = JsonConvert.DeserializeObject<EmployeeEntity>(requestBody);
                if (input.EmployeeName == "")
                {
                    string str = "{  'Success': 'false','Data': 'null','Message':'Employee Name not found' }";
                    dynamic json = JsonConvert.DeserializeObject(str);
                    return new OkObjectResult(json);
                }
                else if (input.EmployeeSalary == 0)
                {
                    string str = "{ 'EmployeeEntity': { 'Success': 'false','Data': 'null','Message':'Employee Salary not found'} }";
                    dynamic json = JsonConvert.DeserializeObject(str);
                    return new OkObjectResult(json);
                }
                var Emp = new EmployeeEntity() { EmployeeName = input.EmployeeName, EmployeeSalary = input.EmployeeSalary };

                //the object we need to add has to have a lower case id property or we'll
                // end up with a cosmosdb document with two properties - id (autogenerated) and Id
                await todos.AddAsync(new { id = Emp.EmployeeId, Emp.EmployeeName, Emp.EmployeeSalary });
                return new OkObjectResult(Emp);
            }
            catch
            {
                string str = "{ 'EmployeeEntity': { 'Success': 'False','Data': 'null','Message':'Not Created'} }";
                dynamic json = JsonConvert.DeserializeObject(str);
                return new OkObjectResult(json);
            }
        }
    }
}